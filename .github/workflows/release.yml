name: release
env:
  DEBUG: napi:*
  RUST_BACKTRACE: full
  APP_NAME: source-code-diagnosis
  MACOSX_DEPLOYMENT_TARGET: '10.13'
permissions:
  contents: write
  id-token: write
on:
  release:
    types: [prereleased]
    
jobs:

  cargo-test:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
          - host: macos-14
            target: aarch64-apple-darwin

          - host: windows-2022
            target: x86_64-pc-windows-msvc
          - host: windows-2022
            target: i686-pc-windows-msvc
          - host: windows-2022
            target: aarch64-pc-windows-msvc

          - host: ubuntu-24.04
            target: x86_64-unknown-linux-musl

          # - host: ubuntu-24.04
          #   target: i686-unknown-linux-musl

          - host: ubuntu-24.04
            target: aarch64-unknown-linux-musl
          - host: ubuntu-24.04
            target: armv7-unknown-linux-musleabihf
          - host: ubuntu-24.04
            target: arm-linux-androideabi
          - host: ubuntu-24.04
            target: aarch64-linux-android

    name: Cargo test artifacts ${{ matrix.settings.target }} on ${{ matrix.settings.host }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          override: true
          target: ${{ matrix.settings.target }}
          components: rustfmt

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.settings.target }} 

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Cargo test
        run: cargo test

  build-artifacts:
    # needs:
    #   - cargo-test
    strategy:
      fail-fast: false
      matrix:
        settings:

          # macos
          - host: macos-13
            target: x86_64-apple-darwin
          - host: macos-14
            target: aarch64-apple-darwin

          # windows
          - host: windows-2022
            target: x86_64-pc-windows-msvc
          - host: windows-2022
            target: i686-pc-windows-msvc
          - host: windows-2022
            target: aarch64-pc-windows-msvc

          # linux
          - host: ubuntu-24.04
            target: x86_64-unknown-linux-musl
          - host: ubuntu-24.04
            target: x86_64-unknown-freebsd

          # - host: ubuntu-24.04
          #   target: i686-unknown-linux-musl

          - host: ubuntu-24.04
            target: aarch64-unknown-linux-musl
          - host: ubuntu-24.04
            target: armv7-unknown-linux-musleabihf


    name: Build artifacts ${{ matrix.settings.target }} on ${{ matrix.settings.host }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'pnpm' 

      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          override: true
          target: ${{ matrix.settings.target }}
          components: rustfmt

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.settings.target }} 

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies 

      - name: Build artifacts
        run: |
            pnpm build --target ${{ matrix.settings.target }} 

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  test-artifacts:
    needs:
      - build-artifacts
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
          - host: macos-14
            target: aarch64-apple-darwin

          - host: windows-2022
            target: x86_64-pc-windows-msvc
          - host: windows-2022
            target: i686-pc-windows-msvc
          - host: windows-2022
            target: aarch64-pc-windows-msvc

          - host: ubuntu-24.04
            target: x86_64-unknown-linux-musl
          - host: ubuntu-24.04
            target: x86_64-unknown-freebsd
          # - host: ubuntu-24.04
          #   target: i686-unknown-linux-musl

          - host: ubuntu-24.04
            target: aarch64-unknown-linux-musl
          - host: ubuntu-24.04
            target: armv7-unknown-linux-musleabihf

        node:
          - '18'
          - '20'

    name: Test artifacts ${{ matrix.settings.target }} on ${{ matrix.settings.host }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm' 

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies 

      - name: Build js
        run: pnpm build:js

      - name: Test
        run: pnpm test

  publish:
    needs:
      - test-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies

      - name: Build js
        run: pnpm build:js

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List packages
        run: ls -R ./artifacts
        shell: bash

      - name: Move artifacts
        run: npm run artifacts

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish
        run: |
          npm config set provenance true
          TAG=${{github.ref_name}}
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          if echo "$TAG" | grep -q "^v[0-9]\+\.[0-9]\+\.[0-9]\+$"; then
            npm publish --access public 
          elif echo "$TAG" | grep -q "^v[0-9]\+\.[0-9]\+\.[0-9]\+"; then
            npm publish --tag next --access public 
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  update-release:
    name: Update release
    runs-on: ubuntu-latest
    needs:
      - publish
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update release
        run: |
          TAG=${{github.ref_name}}
          echo "Update release $TAG"
          gh release edit $TAG --draft=false --prerelease=false --latest=true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
 


